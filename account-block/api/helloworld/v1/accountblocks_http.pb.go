// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: api/helloworld/v1/accountblocks.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGreeterAdminAccountBlock = "/helloworld.v1.Greeter/AdminAccountBlock"
const OperationGreeterCaseAccountBlock = "/helloworld.v1.Greeter/CaseAccountBlock"
const OperationGreeterCreateAccountBlock = "/helloworld.v1.Greeter/CreateAccountBlock"
const OperationGreeterFindAccountBlock = "/helloworld.v1.Greeter/FindAccountBlock"
const OperationGreeterRiskAccountBlock = "/helloworld.v1.Greeter/RiskAccountBlock"
const OperationGreeterUpdateAccountBlock = "/helloworld.v1.Greeter/UpdateAccountBlock"

type GreeterHTTPServer interface {
	AdminAccountBlock(context.Context, *BlockRequest) (*BlockResponse, error)
	CaseAccountBlock(context.Context, *BlockRequest) (*BlockResponse, error)
	// CreateAccountBlock Sends a greeting
	CreateAccountBlock(context.Context, *BlockRequest) (*BlockResponse, error)
	FindAccountBlock(context.Context, *FindBlockRequest) (*FindBlockResponse, error)
	RiskAccountBlock(context.Context, *BlockRequest) (*BlockResponse, error)
	UpdateAccountBlock(context.Context, *UpdateBlockRequest) (*UpdateBlockResponse, error)
}

func RegisterGreeterHTTPServer(s *http.Server, srv GreeterHTTPServer) {
	r := s.Route("/")
	r.POST("v1/accountblock", _Greeter_CreateAccountBlock0_HTTP_Handler(srv))
	r.POST("v1/accountblock", _Greeter_AdminAccountBlock0_HTTP_Handler(srv))
	r.POST("v1/accountblock", _Greeter_RiskAccountBlock0_HTTP_Handler(srv))
	r.POST("v1/accountblock", _Greeter_CaseAccountBlock0_HTTP_Handler(srv))
	r.GET("v1/find/accountblock/{accountNumber}", _Greeter_FindAccountBlock0_HTTP_Handler(srv))
	r.PUT("v1/update/accountblock", _Greeter_UpdateAccountBlock0_HTTP_Handler(srv))
}

func _Greeter_CreateAccountBlock0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BlockRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterCreateAccountBlock)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAccountBlock(ctx, req.(*BlockRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BlockResponse)
		return ctx.Result(200, reply)
	}
}

func _Greeter_AdminAccountBlock0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BlockRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterAdminAccountBlock)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminAccountBlock(ctx, req.(*BlockRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BlockResponse)
		return ctx.Result(200, reply)
	}
}

func _Greeter_RiskAccountBlock0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BlockRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterRiskAccountBlock)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RiskAccountBlock(ctx, req.(*BlockRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BlockResponse)
		return ctx.Result(200, reply)
	}
}

func _Greeter_CaseAccountBlock0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BlockRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterCaseAccountBlock)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CaseAccountBlock(ctx, req.(*BlockRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BlockResponse)
		return ctx.Result(200, reply)
	}
}

func _Greeter_FindAccountBlock0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindBlockRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterFindAccountBlock)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindAccountBlock(ctx, req.(*FindBlockRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindBlockResponse)
		return ctx.Result(200, reply)
	}
}

func _Greeter_UpdateAccountBlock0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBlockRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterUpdateAccountBlock)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAccountBlock(ctx, req.(*UpdateBlockRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateBlockResponse)
		return ctx.Result(200, reply)
	}
}

type GreeterHTTPClient interface {
	AdminAccountBlock(ctx context.Context, req *BlockRequest, opts ...http.CallOption) (rsp *BlockResponse, err error)
	CaseAccountBlock(ctx context.Context, req *BlockRequest, opts ...http.CallOption) (rsp *BlockResponse, err error)
	CreateAccountBlock(ctx context.Context, req *BlockRequest, opts ...http.CallOption) (rsp *BlockResponse, err error)
	FindAccountBlock(ctx context.Context, req *FindBlockRequest, opts ...http.CallOption) (rsp *FindBlockResponse, err error)
	RiskAccountBlock(ctx context.Context, req *BlockRequest, opts ...http.CallOption) (rsp *BlockResponse, err error)
	UpdateAccountBlock(ctx context.Context, req *UpdateBlockRequest, opts ...http.CallOption) (rsp *UpdateBlockResponse, err error)
}

type GreeterHTTPClientImpl struct {
	cc *http.Client
}

func NewGreeterHTTPClient(client *http.Client) GreeterHTTPClient {
	return &GreeterHTTPClientImpl{client}
}

func (c *GreeterHTTPClientImpl) AdminAccountBlock(ctx context.Context, in *BlockRequest, opts ...http.CallOption) (*BlockResponse, error) {
	var out BlockResponse
	pattern := "v1/accountblock"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterAdminAccountBlock))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterHTTPClientImpl) CaseAccountBlock(ctx context.Context, in *BlockRequest, opts ...http.CallOption) (*BlockResponse, error) {
	var out BlockResponse
	pattern := "v1/accountblock"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterCaseAccountBlock))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterHTTPClientImpl) CreateAccountBlock(ctx context.Context, in *BlockRequest, opts ...http.CallOption) (*BlockResponse, error) {
	var out BlockResponse
	pattern := "v1/accountblock"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterCreateAccountBlock))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterHTTPClientImpl) FindAccountBlock(ctx context.Context, in *FindBlockRequest, opts ...http.CallOption) (*FindBlockResponse, error) {
	var out FindBlockResponse
	pattern := "v1/find/accountblock/{accountNumber}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterFindAccountBlock))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterHTTPClientImpl) RiskAccountBlock(ctx context.Context, in *BlockRequest, opts ...http.CallOption) (*BlockResponse, error) {
	var out BlockResponse
	pattern := "v1/accountblock"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterRiskAccountBlock))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterHTTPClientImpl) UpdateAccountBlock(ctx context.Context, in *UpdateBlockRequest, opts ...http.CallOption) (*UpdateBlockResponse, error) {
	var out UpdateBlockResponse
	pattern := "v1/update/accountblock"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterUpdateAccountBlock))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
