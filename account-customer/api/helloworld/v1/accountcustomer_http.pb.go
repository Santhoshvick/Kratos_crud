// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: api/helloworld/v1/accountcustomer.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAccountCustomerCreateAccountCustomer = "/helloworld.v1.AccountCustomer/CreateAccountCustomer"

type AccountCustomerHTTPServer interface {
	// CreateAccountCustomer Sends a greeting
	CreateAccountCustomer(context.Context, *CreateCustomerAccountRequest) (*CreateCustomerAccountReply, error)
}

func RegisterAccountCustomerHTTPServer(s *http.Server, srv AccountCustomerHTTPServer) {
	r := s.Route("/")
	r.POST("v1/accountcustomer/create", _AccountCustomer_CreateAccountCustomer0_HTTP_Handler(srv))
}

func _AccountCustomer_CreateAccountCustomer0_HTTP_Handler(srv AccountCustomerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCustomerAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountCustomerCreateAccountCustomer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAccountCustomer(ctx, req.(*CreateCustomerAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCustomerAccountReply)
		return ctx.Result(200, reply)
	}
}

type AccountCustomerHTTPClient interface {
	CreateAccountCustomer(ctx context.Context, req *CreateCustomerAccountRequest, opts ...http.CallOption) (rsp *CreateCustomerAccountReply, err error)
}

type AccountCustomerHTTPClientImpl struct {
	cc *http.Client
}

func NewAccountCustomerHTTPClient(client *http.Client) AccountCustomerHTTPClient {
	return &AccountCustomerHTTPClientImpl{client}
}

func (c *AccountCustomerHTTPClientImpl) CreateAccountCustomer(ctx context.Context, in *CreateCustomerAccountRequest, opts ...http.CallOption) (*CreateCustomerAccountReply, error) {
	var out CreateCustomerAccountReply
	pattern := "v1/accountcustomer/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountCustomerCreateAccountCustomer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
