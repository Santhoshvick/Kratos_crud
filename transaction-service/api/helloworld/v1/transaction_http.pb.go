// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: api/helloworld/v1/transaction.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTransactionCreateTransaction = "/helloworld.v1.Transaction/CreateTransaction"
const OperationTransactionDeleteTransaction = "/helloworld.v1.Transaction/DeleteTransaction"
const OperationTransactionFindTransaction = "/helloworld.v1.Transaction/FindTransaction"
const OperationTransactionUpdateTransaction = "/helloworld.v1.Transaction/UpdateTransaction"

type TransactionHTTPServer interface {
	CreateTransaction(context.Context, *CreateRequestTransaction) (*CreateResponseTransaction, error)
	DeleteTransaction(context.Context, *DeleteRequestTransaction) (*DeleteResponseTransaction, error)
	FindTransaction(context.Context, *FindRequestTransaction) (*FindReponseTransaction, error)
	UpdateTransaction(context.Context, *UpdateRequestTransaction) (*UpdateResponseTransaction, error)
}

func RegisterTransactionHTTPServer(s *http.Server, srv TransactionHTTPServer) {
	r := s.Route("/")
	r.POST("v1/transaction/create", _Transaction_CreateTransaction0_HTTP_Handler(srv))
	r.PUT("v1/transaction/update", _Transaction_UpdateTransaction0_HTTP_Handler(srv))
	r.DELETE("v1/transaction/delete/{transactionId}", _Transaction_DeleteTransaction0_HTTP_Handler(srv))
	r.GET("v1/transaction/find/{transactionId}", _Transaction_FindTransaction0_HTTP_Handler(srv))
}

func _Transaction_CreateTransaction0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRequestTransaction
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionCreateTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTransaction(ctx, req.(*CreateRequestTransaction))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateResponseTransaction)
		return ctx.Result(200, reply)
	}
}

func _Transaction_UpdateTransaction0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRequestTransaction
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionUpdateTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTransaction(ctx, req.(*UpdateRequestTransaction))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateResponseTransaction)
		return ctx.Result(200, reply)
	}
}

func _Transaction_DeleteTransaction0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRequestTransaction
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionDeleteTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTransaction(ctx, req.(*DeleteRequestTransaction))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteResponseTransaction)
		return ctx.Result(200, reply)
	}
}

func _Transaction_FindTransaction0_HTTP_Handler(srv TransactionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FindRequestTransaction
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTransactionFindTransaction)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindTransaction(ctx, req.(*FindRequestTransaction))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FindReponseTransaction)
		return ctx.Result(200, reply)
	}
}

type TransactionHTTPClient interface {
	CreateTransaction(ctx context.Context, req *CreateRequestTransaction, opts ...http.CallOption) (rsp *CreateResponseTransaction, err error)
	DeleteTransaction(ctx context.Context, req *DeleteRequestTransaction, opts ...http.CallOption) (rsp *DeleteResponseTransaction, err error)
	FindTransaction(ctx context.Context, req *FindRequestTransaction, opts ...http.CallOption) (rsp *FindReponseTransaction, err error)
	UpdateTransaction(ctx context.Context, req *UpdateRequestTransaction, opts ...http.CallOption) (rsp *UpdateResponseTransaction, err error)
}

type TransactionHTTPClientImpl struct {
	cc *http.Client
}

func NewTransactionHTTPClient(client *http.Client) TransactionHTTPClient {
	return &TransactionHTTPClientImpl{client}
}

func (c *TransactionHTTPClientImpl) CreateTransaction(ctx context.Context, in *CreateRequestTransaction, opts ...http.CallOption) (*CreateResponseTransaction, error) {
	var out CreateResponseTransaction
	pattern := "v1/transaction/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTransactionCreateTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TransactionHTTPClientImpl) DeleteTransaction(ctx context.Context, in *DeleteRequestTransaction, opts ...http.CallOption) (*DeleteResponseTransaction, error) {
	var out DeleteResponseTransaction
	pattern := "v1/transaction/delete/{transactionId}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTransactionDeleteTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TransactionHTTPClientImpl) FindTransaction(ctx context.Context, in *FindRequestTransaction, opts ...http.CallOption) (*FindReponseTransaction, error) {
	var out FindReponseTransaction
	pattern := "v1/transaction/find/{transactionId}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTransactionFindTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TransactionHTTPClientImpl) UpdateTransaction(ctx context.Context, in *UpdateRequestTransaction, opts ...http.CallOption) (*UpdateResponseTransaction, error) {
	var out UpdateResponseTransaction
	pattern := "v1/transaction/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTransactionUpdateTransaction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
